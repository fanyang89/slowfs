// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: slowfs.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SlowFs_InjectError_FullMethodName   = "/slowfs.proto.SlowFs/InjectError"
	SlowFs_InjectLatency_FullMethodName = "/slowfs.proto.SlowFs/InjectLatency"
	SlowFs_DeleteFault_FullMethodName   = "/slowfs.proto.SlowFs/DeleteFault"
	SlowFs_ListFaults_FullMethodName    = "/slowfs.proto.SlowFs/ListFaults"
)

// SlowFsClient is the client API for SlowFs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlowFsClient interface {
	InjectError(ctx context.Context, in *InjectErrorRequest, opts ...grpc.CallOption) (*InjectErrorResponse, error)
	InjectLatency(ctx context.Context, in *InjectLatencyRequest, opts ...grpc.CallOption) (*InjectLatencyResponse, error)
	DeleteFault(ctx context.Context, in *DeleteFaultRequest, opts ...grpc.CallOption) (*DeleteFaultResponse, error)
	ListFaults(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListFaultsResponse, error)
}

type slowFsClient struct {
	cc grpc.ClientConnInterface
}

func NewSlowFsClient(cc grpc.ClientConnInterface) SlowFsClient {
	return &slowFsClient{cc}
}

func (c *slowFsClient) InjectError(ctx context.Context, in *InjectErrorRequest, opts ...grpc.CallOption) (*InjectErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InjectErrorResponse)
	err := c.cc.Invoke(ctx, SlowFs_InjectError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slowFsClient) InjectLatency(ctx context.Context, in *InjectLatencyRequest, opts ...grpc.CallOption) (*InjectLatencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InjectLatencyResponse)
	err := c.cc.Invoke(ctx, SlowFs_InjectLatency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slowFsClient) DeleteFault(ctx context.Context, in *DeleteFaultRequest, opts ...grpc.CallOption) (*DeleteFaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFaultResponse)
	err := c.cc.Invoke(ctx, SlowFs_DeleteFault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slowFsClient) ListFaults(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListFaultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFaultsResponse)
	err := c.cc.Invoke(ctx, SlowFs_ListFaults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlowFsServer is the server API for SlowFs service.
// All implementations must embed UnimplementedSlowFsServer
// for forward compatibility.
type SlowFsServer interface {
	InjectError(context.Context, *InjectErrorRequest) (*InjectErrorResponse, error)
	InjectLatency(context.Context, *InjectLatencyRequest) (*InjectLatencyResponse, error)
	DeleteFault(context.Context, *DeleteFaultRequest) (*DeleteFaultResponse, error)
	ListFaults(context.Context, *Void) (*ListFaultsResponse, error)
	mustEmbedUnimplementedSlowFsServer()
}

// UnimplementedSlowFsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSlowFsServer struct{}

func (UnimplementedSlowFsServer) InjectError(context.Context, *InjectErrorRequest) (*InjectErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectError not implemented")
}
func (UnimplementedSlowFsServer) InjectLatency(context.Context, *InjectLatencyRequest) (*InjectLatencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectLatency not implemented")
}
func (UnimplementedSlowFsServer) DeleteFault(context.Context, *DeleteFaultRequest) (*DeleteFaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFault not implemented")
}
func (UnimplementedSlowFsServer) ListFaults(context.Context, *Void) (*ListFaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaults not implemented")
}
func (UnimplementedSlowFsServer) mustEmbedUnimplementedSlowFsServer() {}
func (UnimplementedSlowFsServer) testEmbeddedByValue()                {}

// UnsafeSlowFsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlowFsServer will
// result in compilation errors.
type UnsafeSlowFsServer interface {
	mustEmbedUnimplementedSlowFsServer()
}

func RegisterSlowFsServer(s grpc.ServiceRegistrar, srv SlowFsServer) {
	// If the following call pancis, it indicates UnimplementedSlowFsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SlowFs_ServiceDesc, srv)
}

func _SlowFs_InjectError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlowFsServer).InjectError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlowFs_InjectError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlowFsServer).InjectError(ctx, req.(*InjectErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlowFs_InjectLatency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectLatencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlowFsServer).InjectLatency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlowFs_InjectLatency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlowFsServer).InjectLatency(ctx, req.(*InjectLatencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlowFs_DeleteFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlowFsServer).DeleteFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlowFs_DeleteFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlowFsServer).DeleteFault(ctx, req.(*DeleteFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlowFs_ListFaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlowFsServer).ListFaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlowFs_ListFaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlowFsServer).ListFaults(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// SlowFs_ServiceDesc is the grpc.ServiceDesc for SlowFs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlowFs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slowfs.proto.SlowFs",
	HandlerType: (*SlowFsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InjectError",
			Handler:    _SlowFs_InjectError_Handler,
		},
		{
			MethodName: "InjectLatency",
			Handler:    _SlowFs_InjectLatency_Handler,
		},
		{
			MethodName: "DeleteFault",
			Handler:    _SlowFs_DeleteFault_Handler,
		},
		{
			MethodName: "ListFaults",
			Handler:    _SlowFs_ListFaults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slowfs.proto",
}
