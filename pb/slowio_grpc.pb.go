// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: slowio.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SlowIO_ListFaults_FullMethodName      = "/slowio.proto.SlowIO/ListFaults"
	SlowIO_DeleteFault_FullMethodName     = "/slowio.proto.SlowIO/DeleteFault"
	SlowIO_InjectFuseFault_FullMethodName = "/slowio.proto.SlowIO/InjectFuseFault"
	SlowIO_InjectNbdFault_FullMethodName  = "/slowio.proto.SlowIO/InjectNbdFault"
)

// SlowIOClient is the client API for SlowIO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlowIOClient interface {
	ListFaults(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListFaultsResponse, error)
	DeleteFault(ctx context.Context, in *DeleteFaultRequest, opts ...grpc.CallOption) (*DeleteFaultResponse, error)
	InjectFuseFault(ctx context.Context, in *InjectFuseFaultRequest, opts ...grpc.CallOption) (*InjectFuseFaultResponse, error)
	InjectNbdFault(ctx context.Context, in *InjectNbdFaultRequest, opts ...grpc.CallOption) (*InjectNbdFaultResponse, error)
}

type slowIOClient struct {
	cc grpc.ClientConnInterface
}

func NewSlowIOClient(cc grpc.ClientConnInterface) SlowIOClient {
	return &slowIOClient{cc}
}

func (c *slowIOClient) ListFaults(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListFaultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFaultsResponse)
	err := c.cc.Invoke(ctx, SlowIO_ListFaults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slowIOClient) DeleteFault(ctx context.Context, in *DeleteFaultRequest, opts ...grpc.CallOption) (*DeleteFaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFaultResponse)
	err := c.cc.Invoke(ctx, SlowIO_DeleteFault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slowIOClient) InjectFuseFault(ctx context.Context, in *InjectFuseFaultRequest, opts ...grpc.CallOption) (*InjectFuseFaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InjectFuseFaultResponse)
	err := c.cc.Invoke(ctx, SlowIO_InjectFuseFault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slowIOClient) InjectNbdFault(ctx context.Context, in *InjectNbdFaultRequest, opts ...grpc.CallOption) (*InjectNbdFaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InjectNbdFaultResponse)
	err := c.cc.Invoke(ctx, SlowIO_InjectNbdFault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlowIOServer is the server API for SlowIO service.
// All implementations must embed UnimplementedSlowIOServer
// for forward compatibility.
type SlowIOServer interface {
	ListFaults(context.Context, *Void) (*ListFaultsResponse, error)
	DeleteFault(context.Context, *DeleteFaultRequest) (*DeleteFaultResponse, error)
	InjectFuseFault(context.Context, *InjectFuseFaultRequest) (*InjectFuseFaultResponse, error)
	InjectNbdFault(context.Context, *InjectNbdFaultRequest) (*InjectNbdFaultResponse, error)
	mustEmbedUnimplementedSlowIOServer()
}

// UnimplementedSlowIOServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSlowIOServer struct{}

func (UnimplementedSlowIOServer) ListFaults(context.Context, *Void) (*ListFaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaults not implemented")
}
func (UnimplementedSlowIOServer) DeleteFault(context.Context, *DeleteFaultRequest) (*DeleteFaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFault not implemented")
}
func (UnimplementedSlowIOServer) InjectFuseFault(context.Context, *InjectFuseFaultRequest) (*InjectFuseFaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectFuseFault not implemented")
}
func (UnimplementedSlowIOServer) InjectNbdFault(context.Context, *InjectNbdFaultRequest) (*InjectNbdFaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InjectNbdFault not implemented")
}
func (UnimplementedSlowIOServer) mustEmbedUnimplementedSlowIOServer() {}
func (UnimplementedSlowIOServer) testEmbeddedByValue()                {}

// UnsafeSlowIOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlowIOServer will
// result in compilation errors.
type UnsafeSlowIOServer interface {
	mustEmbedUnimplementedSlowIOServer()
}

func RegisterSlowIOServer(s grpc.ServiceRegistrar, srv SlowIOServer) {
	// If the following call pancis, it indicates UnimplementedSlowIOServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SlowIO_ServiceDesc, srv)
}

func _SlowIO_ListFaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlowIOServer).ListFaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlowIO_ListFaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlowIOServer).ListFaults(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlowIO_DeleteFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlowIOServer).DeleteFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlowIO_DeleteFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlowIOServer).DeleteFault(ctx, req.(*DeleteFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlowIO_InjectFuseFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectFuseFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlowIOServer).InjectFuseFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlowIO_InjectFuseFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlowIOServer).InjectFuseFault(ctx, req.(*InjectFuseFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SlowIO_InjectNbdFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectNbdFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlowIOServer).InjectNbdFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlowIO_InjectNbdFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlowIOServer).InjectNbdFault(ctx, req.(*InjectNbdFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SlowIO_ServiceDesc is the grpc.ServiceDesc for SlowIO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlowIO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slowio.proto.SlowIO",
	HandlerType: (*SlowIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFaults",
			Handler:    _SlowIO_ListFaults_Handler,
		},
		{
			MethodName: "DeleteFault",
			Handler:    _SlowIO_DeleteFault_Handler,
		},
		{
			MethodName: "InjectFuseFault",
			Handler:    _SlowIO_InjectFuseFault_Handler,
		},
		{
			MethodName: "InjectNbdFault",
			Handler:    _SlowIO_InjectNbdFault_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slowio.proto",
}
